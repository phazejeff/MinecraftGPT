package com.phazejeff.mcgpt.game;

import java.util.List;

import com.phazejeff.mcgpt.openai.Chat;

import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NbtCompound;

/**
 * A custom build item in Minecraft generated with /build.
 * This will hold the data generated by OpenAI for /edit to reference as context
 * 
 * @author phazejeff
 * @version 1.0
 */
public class BuildItem extends Item {

    private Chat chat;

    /**
     * Constructs a new BuildItem with the specified settings.
     *
     * @param settings The settings for the build item.
     */
    public BuildItem(Settings settings) {
        super(settings);
    }
    
    /**
     * Retrieves the associated chat instance of the build item.
     *
     * @return The chat instance associated with the build item.
     */
    public Chat getChat() {
        return chat;
    }

    /**
     * Sets the chat instance to be associated with the build item.
     *
     * @param chat The chat instance to be set.
     */
    public void setChat(Chat chat) {
        this.chat = chat;
    }

    /**
     * Creates an item stack with the specified messages and coordinates.
     *
     * @param messages The list of messages to be included in the item stack.
     * @param x        The x-coordinate to be stored in the item stack.
     * @param y        The y-coordinate to be stored in the item stack.
     * @param z        The z-coordinate to be stored in the item stack.
     * @return The created item stack.
     */
    public ItemStack getItemStack(List<String> messages, int x, int y, int z) {
        ItemStack itemStack = new ItemStack(this);

        NbtCompound nbt = new NbtCompound();

        nbt.putInt("x", x);
        nbt.putInt("y", y);
        nbt.putInt("z", z);

        // also saves the amount of messages
        nbt.putInt("size", messages.size());
        for (int i=0; i < messages.size(); i++) {
            nbt.putString(String.valueOf(i), messages.get(i));
        }
        itemStack.setNbt(nbt);

        return itemStack;
    }

    /**
     * Updates the existing item stack with the specified messages, based on the old NBT compound.
     *
     * @param oldNbt   The old NBT compound of the item stack.
     * @param messages The updated list of messages to be included in the item stack.
     * @return The updated item stack.
     */
    public ItemStack updateItemStack(NbtCompound oldNbt, List<String> messages) {
        ItemStack newItemStack = getItemStack(messages, oldNbt.getInt("x"), oldNbt.getInt("y"), oldNbt.getInt("z"));
        return newItemStack;
    }
}

